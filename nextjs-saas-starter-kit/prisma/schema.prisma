// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // Added password field for local authentication
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  subscription Subscription?
  organization Organization?
  invoices     Invoice[]
  apiKeys      ApiKey[]
  usage        Usage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  members OrganizationMember[]
  plans   Plan[]
}

model OrganizationMember {
  id    String @id @default(cuid())
  role  String @default("member") // owner, admin, member
  email String

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, email])
}

model Plan {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Int     // Price in cents
  interval    String  // monthly, yearly
  features    Json    // Array of features
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  subscriptions Subscription[]
}

model Subscription {
  id                String   @id @default(cuid())
  stripeCustomerId  String?  @unique
  stripeSubscriptionId String? @unique
  status            String   // active, canceled, past_due, etc.
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  planId String
  plan   Plan   @relation(fields: [planId], references: [id])

  invoices Invoice[]
}

model Invoice {
  id             String   @id @default(cuid())
  stripeInvoiceId String? @unique
  amount         Int      // Amount in cents
  status         String   // paid, open, void, etc.
  invoiceUrl     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Usage {
  id        String   @id @default(cuid())
  endpoint  String
  method    String
  status    Int
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}
