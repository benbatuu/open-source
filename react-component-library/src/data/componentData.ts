import React from 'react';
import { PropInfo } from '../components/ui/props-table';

export interface ComponentInfo {
  id: string;
  name: string;
  description: string;
  category: string;
  component: React.ComponentType<any>;
  route?: React.ComponentType<any>;
}

export const components: ComponentInfo[] = [
  {
    id: 'button',
    name: 'Button',
    description: 'Interactive button component with multiple variants and sizes',
    category: 'Components',
    component: React.lazy(() => import('../components/ui/button').then(module => ({ default: module.Button }))),
    route: React.lazy(() => import('../components/routes/ButtonRoute').then(module => ({ default: module.ButtonRoute }))),
  },
  {
    id: 'badge',
    name: 'Badge',
    description: 'Small status and notification badges',
    category: 'Components',
    component: React.lazy(() => import('../components/ui/badge').then(module => ({ default: module.Badge }))),
    route: React.lazy(() => import('../components/routes/BadgeRoute').then(module => ({ default: module.BadgeRoute }))),
  },
  {
    id: 'card',
    name: 'Card',
    description: 'Flexible container component for content grouping',
    category: 'Components',
    component: React.lazy(() => import('../components/ui/card').then(module => ({ default: module.Card }))),
    route: React.lazy(() => import('../components/routes/CardRoute').then(module => ({ default: module.CardRoute }))),
  },
  {
    id: 'input',
    name: 'Input',
    description: 'Text input field with validation and styling options',
    category: 'Components',
    component: React.lazy(() => import('../components/ui/input').then(module => ({ default: module.Input }))),
    route: React.lazy(() => import('../components/routes/InputRoute').then(module => ({ default: module.InputRoute }))),
  },
  {
    id: 'textarea',
    name: 'Textarea',
    description: 'Multi-line text input component',
    category: 'Components',
    component: React.lazy(() => import('../components/ui/textarea').then(module => ({ default: module.Textarea }))),
    route: React.lazy(() => import('../components/routes/TextareaRoute').then(module => ({ default: module.TextareaRoute }))),
  },
  {
    id: 'select',
    name: 'Select',
    description: 'Dropdown selection component',
    category: 'Components',
    component: React.lazy(() => import('../components/ui/select').then(module => ({ default: module.Select }))),
    route: React.lazy(() => import('../components/routes/SelectRoute').then(module => ({ default: module.SelectRoute }))),
  },
  {
    id: 'checkbox',
    name: 'Checkbox',
    description: 'Checkbox input component with multiple states',
    category: 'Components',
    component: React.lazy(() => import('../components/ui/checkbox').then(module => ({ default: module.Checkbox }))),
    route: React.lazy(() => import('../components/routes/CheckboxRoute').then(module => ({ default: module.CheckboxRoute }))),
  },
  {
    id: 'switch',
    name: 'Switch',
    description: 'Toggle switch component',
    category: 'Components',
    component: React.lazy(() => import('../components/ui/switch').then(module => ({ default: module.Switch }))),
    route: React.lazy(() => import('../components/routes/SwitchRoute').then(module => ({ default: module.SwitchRoute }))),
  },
  {
    id: 'tabs',
    name: 'Tabs',
    description: 'Tabbed interface component',
    category: 'Components',
    component: React.lazy(() => import('../components/ui/tabs').then(module => ({ default: module.Tabs }))),
    route: React.lazy(() => import('../components/routes/TabsRoute').then(module => ({ default: module.TabsRoute }))),
  },
  {
    id: 'alert',
    name: 'Alert',
    description: 'Alert notification component',
    category: 'Components',
    component: React.lazy(() => import('../components/ui/alert').then(module => ({ default: module.Alert }))),
    route: React.lazy(() => import('../components/routes/AlertRoute').then(module => ({ default: module.AlertRoute }))),
  },
  {
    id: 'progress',
    name: 'Progress',
    description: 'Progress bar component',
    category: 'Components',
    component: React.lazy(() => import('../components/ui/progress').then(module => ({ default: module.Progress }))),
  },
  {
    id: 'toast',
    name: 'Toast',
    description: 'Toast notification component',
    category: 'Components',
    component: React.lazy(() => import('../components/ui/toast').then(module => ({ default: module.Toast }))),
  },
  {
    id: 'avatar',
    name: 'Avatar',
    description: 'User avatar component with fallback support',
    category: 'Components',
    component: React.lazy(() => import('../components/ui/avatar').then(module => ({ default: module.Avatar }))),
    route: React.lazy(() => import('../components/routes/AvatarRoute').then(module => ({ default: module.AvatarRoute }))),
  },
  {
    id: 'separator',
    name: 'Separator',
    description: 'Visual separator component',
    category: 'Components',
    component: React.lazy(() => import('../components/ui/separator').then(module => ({ default: module.Separator }))),
  },
  {
    id: 'modal',
    name: 'Modal',
    description: 'Modal dialog component for overlays and forms',
    category: 'Overlay',
    component: React.lazy(() => import('../components/ui/modal').then(module => ({ default: module.Modal }))),
    route: React.lazy(() => import('../components/routes/ModalRoute').then(module => ({ default: module.ModalRoute }))),
  },
  {
    id: 'tooltip',
    name: 'Tooltip',
    description: 'Tooltip component for contextual information',
    category: 'Overlay',
    component: React.lazy(() => import('../components/ui/tooltip').then(module => ({ default: module.Tooltip }))),
    route: React.lazy(() => import('../components/routes/TooltipRoute').then(module => ({ default: module.TooltipRoute }))),
  },
  {
    id: 'datatable',
    name: 'DataTable',
    description: 'Advanced data table with sorting, filtering, and pagination',
    category: 'Data Display',
    component: React.lazy(() => import('../components/ui/datatable').then(module => ({ default: module.DataTable }))),
    route: React.lazy(() => import('../components/routes/DataTableRoute').then(module => ({ default: module.DataTableRoute }))),
  },
  {
    id: 'chart',
    name: 'Chart',
    description: 'Interactive charts with multiple types and variants',
    category: 'Data Display',
    component: React.lazy(() => import('../components/ui/chart').then(module => ({ default: module.Chart }))),
    route: React.lazy(() => import('../components/routes/ChartRoute').then(module => ({ default: module.ChartRoute }))),
  },
  {
    id: 'timeline',
    name: 'Timeline',
    description: 'Event timeline component with multiple variants',
    category: 'Data Display',
    component: React.lazy(() => import('../components/ui/timeline').then(module => ({ default: module.Timeline }))),
    route: React.lazy(() => import('../components/routes/TimelineRoute').then(module => ({ default: module.TimelineRoute }))),
  },
  {
    id: 'calendar',
    name: 'Calendar',
    description: 'Interactive calendar with date picker and event management',
    category: 'Data Display',
    component: React.lazy(() => import('../components/ui/calendar').then(module => ({ default: module.Calendar }))),
    route: React.lazy(() => import('../components/routes/CalendarRoute').then(module => ({ default: module.CalendarRoute }))),
  },
  {
    id: 'heatmap',
    name: 'Heatmap',
    description: 'Activity and data visualization heatmap component',
    category: 'Data Display',
    component: React.lazy(() => import('../components/ui/heatmap').then(module => ({ default: module.Heatmap }))),
    route: React.lazy(() => import('../components/routes/HeatmapRoute').then(module => ({ default: module.HeatmapRoute }))),
  },
  {
    id: 'tree',
    name: 'Tree',
    description: 'Hierarchical data display tree component',
    category: 'Data Display',
    component: React.lazy(() => import('../components/ui/tree').then(module => ({ default: module.Tree }))),
    route: React.lazy(() => import('../components/routes/TreeRoute').then(module => ({ default: module.TreeRoute }))),
  },
  {
    id: 'list',
    name: 'List',
    description: 'Virtualized lists for large datasets with sorting and filtering',
    category: 'Data Display',
    component: React.lazy(() => import('../components/ui/list').then(module => ({ default: module.List }))),
    route: React.lazy(() => import('../components/routes/ListRoute').then(module => ({ default: module.ListRoute }))),
  },
  {
    id: 'stats-card',
    name: 'StatsCard',
    description: 'KPI and metrics display cards with trends and indicators',
    category: 'Data Display',
    component: React.lazy(() => import('../components/ui/stats-card').then(module => ({ default: module.StatsCard }))),
    route: React.lazy(() => import('../components/routes/StatsCardRoute').then(module => ({ default: module.StatsCardRoute }))),
  },
];

export function getComponentProps(componentId: string): PropInfo[] {
  const propsMap: Record<string, PropInfo[]> = {
    button: [
      { name: 'variant', type: "'primary' | 'secondary' | 'outline' | 'ghost' | 'link' | 'destructive' | 'success'", description: 'Visual style variant', default: "'primary'" },
      { name: 'size', type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'", description: 'Button size', default: "'md'" },
      { name: 'loading', type: 'boolean', description: 'Show loading spinner', default: 'false' },
      { name: 'disabled', type: 'boolean', description: 'Disable the button', default: 'false' },
      { name: 'icon', type: 'ReactNode', description: 'Icon to display', default: 'undefined' },
      { name: 'iconPosition', type: "'left' | 'right'", description: 'Position of the icon', default: "'left'" },
      { name: 'fullWidth', type: 'boolean', description: 'Make button full width', default: 'false' },
      { name: 'asChild', type: 'boolean', description: 'Render as child component', default: 'false' },
    ],
    badge: [
      { name: 'variant', type: "'default' | 'secondary' | 'destructive' | 'success' | 'warning' | 'info' | 'premium' | 'featured'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'", description: 'Badge size', default: "'md'" },
      { name: 'removable', type: 'boolean', description: 'Show remove button', default: 'false' },
      { name: 'onRemove', type: '() => void', description: 'Callback when removed', default: 'undefined' },
      { name: 'animated', type: 'boolean', description: 'Enable animations', default: 'false' },
      { name: 'icon', type: 'ReactNode', description: 'Icon to display', default: 'undefined' },
      { name: 'iconPosition', type: "'left' | 'right'", description: 'Position of the icon', default: "'left'" },
      { name: 'count', type: 'number', description: 'Numeric count to display', default: 'undefined' },
      { name: 'maxCount', type: 'number', description: 'Maximum count to display', default: '99' },
      { name: 'dot', type: 'boolean', description: 'Show as dot only', default: 'false' },
    ],
    card: [
      { name: 'variant', type: "'default' | 'elevated' | 'outlined' | 'filled' | 'interactive'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'sm' | 'md' | 'lg' | 'xl'", description: 'Card size', default: "'md'" },
      { name: 'interactive', type: 'boolean', description: 'Make card interactive', default: 'false' },
      { name: 'hoverable', type: 'boolean', description: 'Enable hover effects', default: 'false' },
      { name: 'clickable', type: 'boolean', description: 'Make card clickable', default: 'false' },
      { name: 'onCardClick', type: '() => void', description: 'Click handler', default: 'undefined' },
    ],
    input: [
      { name: 'variant', type: "'default' | 'error' | 'success' | 'warning' | 'info' | 'premium' | 'featured'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'", description: 'Input size', default: "'md'" },
      { name: 'icon', type: 'ReactNode', description: 'Icon to display', default: 'undefined' },
      { name: 'iconPosition', type: "'left' | 'right'", description: 'Position of the icon', default: "'left'" },
      { name: 'clearable', type: 'boolean', description: 'Show clear button', default: 'false' },
      { name: 'onClear', type: '() => void', description: 'Clear button handler', default: 'undefined' },
      { name: 'showPasswordToggle', type: 'boolean', description: 'Show password toggle', default: 'false' },
      { name: 'label', type: 'string', description: 'Input label', default: 'undefined' },
      { name: 'helperText', type: 'string', description: 'Helper text', default: 'undefined' },
      { name: 'error', type: 'string', description: 'Error message', default: 'undefined' },
      { name: 'warning', type: 'string', description: 'Warning message', default: 'undefined' },
      { name: 'info', type: 'string', description: 'Info message', default: 'undefined' },
      { name: 'success', type: 'string', description: 'Success message', default: 'undefined' },
      { name: 'autoIcon', type: 'boolean', description: 'Auto-determine icon', default: 'false' },
      { name: 'iconType', type: 'string', description: 'Type of auto icon', default: 'undefined' },
      { name: 'floatingLabel', type: 'boolean', description: 'Use floating label', default: 'false' },
      { name: 'required', type: 'boolean', description: 'Mark as required', default: 'false' },
      { name: 'maxLength', type: 'number', description: 'Maximum length', default: 'undefined' },
      { name: 'showCharacterCount', type: 'boolean', description: 'Show character count', default: 'false' },
      { name: 'loading', type: 'boolean', description: 'Show loading state', default: 'false' },
      { name: 'leftAddon', type: 'ReactNode', description: 'Left addon content', default: 'undefined' },
      { name: 'rightAddon', type: 'ReactNode', description: 'Right addon content', default: 'undefined' },
      { name: 'onFocus', type: '() => void', description: 'Focus handler', default: 'undefined' },
      { name: 'onBlur', type: '() => void', description: 'Blur handler', default: 'undefined' },
    ],
    textarea: [
      { name: 'variant', type: "'default' | 'error' | 'success' | 'warning' | 'info' | 'premium' | 'featured'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'", description: 'Textarea size', default: "'md'" },
      { name: 'label', type: 'string', description: 'Textarea label', default: 'undefined' },
      { name: 'helperText', type: 'string', description: 'Helper text', default: 'undefined' },
      { name: 'error', type: 'string', description: 'Error message', default: 'undefined' },
      { name: 'warning', type: 'string', description: 'Warning message', default: 'undefined' },
      { name: 'info', type: 'string', description: 'Info message', default: 'undefined' },
      { name: 'success', type: 'string', description: 'Success message', default: 'undefined' },
      { name: 'autoIcon', type: 'boolean', description: 'Auto-determine icon', default: 'false' },
      { name: 'iconType', type: 'string', description: 'Type of auto icon', default: 'undefined' },
      { name: 'floatingLabel', type: 'boolean', description: 'Use floating label', default: 'false' },
      { name: 'required', type: 'boolean', description: 'Mark as required', default: 'false' },
      { name: 'maxLength', type: 'number', description: 'Maximum length', default: 'undefined' },
      { name: 'showCharacterCount', type: 'boolean', description: 'Show character count', default: 'false' },
      { name: 'loading', type: 'boolean', description: 'Show loading state', default: 'false' },
      { name: 'clearable', type: 'boolean', description: 'Show clear button', default: 'false' },
      { name: 'onClear', type: '() => void', description: 'Clear button handler', default: 'undefined' },
      { name: 'onFocus', type: '() => void', description: 'Focus handler', default: 'undefined' },
      { name: 'onBlur', type: '() => void', description: 'Blur handler', default: 'undefined' },
    ],
    select: [
      { name: 'variant', type: "'default' | 'error' | 'success' | 'warning' | 'info' | 'premium' | 'featured'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'", description: 'Select size', default: "'md'" },
      { name: 'label', type: 'string', description: 'Select label', default: 'undefined' },
      { name: 'helperText', type: 'string', description: 'Helper text', default: 'undefined' },
      { name: 'error', type: 'string', description: 'Error message', default: 'undefined' },
      { name: 'warning', type: 'string', description: 'Warning message', default: 'undefined' },
      { name: 'info', type: 'string', description: 'Info message', default: 'undefined' },
      { name: 'success', type: 'string', description: 'Success message', default: 'undefined' },
      { name: 'loading', type: 'boolean', description: 'Show loading state', default: 'false' },
      { name: 'icon', type: 'ReactNode', description: 'Icon to display', default: 'undefined' },
      { name: 'iconPosition', type: "'left' | 'right'", description: 'Position of the icon', default: "'left'" },
      { name: 'fullWidth', type: 'boolean', description: 'Make select full width', default: 'false' },
      { name: 'glowing', type: 'boolean', description: 'Enable glowing effect', default: 'false' },
    ],
    checkbox: [
      { name: 'variant', type: "'default' | 'error' | 'success' | 'warning' | 'info' | 'premium' | 'featured'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'", description: 'Checkbox size', default: "'md'" },
      { name: 'label', type: 'string', description: 'Checkbox label', default: 'undefined' },
      { name: 'helperText', type: 'string', description: 'Helper text', default: 'undefined' },
      { name: 'error', type: 'string', description: 'Error message', default: 'undefined' },
      { name: 'warning', type: 'string', description: 'Warning message', default: 'undefined' },
      { name: 'info', type: 'string', description: 'Info message', default: 'undefined' },
      { name: 'success', type: 'string', description: 'Success message', default: 'undefined' },
      { name: 'indeterminate', type: 'boolean', description: 'Indeterminate state', default: 'false' },
      { name: 'icon', type: 'ReactNode', description: 'Custom icon', default: 'undefined' },
      { name: 'loading', type: 'boolean', description: 'Show loading state', default: 'false' },
      { name: 'fullWidth', type: 'boolean', description: 'Make checkbox full width', default: 'false' },
      { name: 'animated', type: 'boolean', description: 'Enable animations', default: 'false' },
      { name: 'glowing', type: 'boolean', description: 'Enable glowing effect', default: 'false' },
    ],
    switch: [
      { name: 'variant', type: "'default' | 'error' | 'success' | 'warning' | 'info' | 'premium' | 'featured' | 'ios26'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'", description: 'Switch size', default: "'md'" },
      { name: 'label', type: 'string', description: 'Switch label', default: 'undefined' },
      { name: 'helperText', type: 'string', description: 'Helper text', default: 'undefined' },
      { name: 'error', type: 'string', description: 'Error message', default: 'undefined' },
      { name: 'warning', type: 'string', description: 'Warning message', default: 'undefined' },
      { name: 'info', type: 'string', description: 'Info message', default: 'undefined' },
      { name: 'success', type: 'string', description: 'Success message', default: 'undefined' },
      { name: 'icon', type: 'ReactNode', description: 'Custom icon', default: 'undefined' },
      { name: 'loading', type: 'boolean', description: 'Show loading state', default: 'false' },
      { name: 'fullWidth', type: 'boolean', description: 'Make switch full width', default: 'false' },
      { name: 'showIcons', type: 'boolean', description: 'Show status icons', default: 'false' },
      { name: 'animated', type: 'boolean', description: 'Enable animations', default: 'false' },
      { name: 'glowing', type: 'boolean', description: 'Enable glowing effect', default: 'false' },
    ],
    tabs: [
      { name: 'variant', type: "'default' | 'outlined' | 'filled' | 'premium' | 'featured' | 'glass'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'sm' | 'md' | 'lg' | 'xl'", description: 'Tabs size', default: "'md'" },
      { name: 'orientation', type: "'horizontal' | 'vertical'", description: 'Tabs orientation', default: "'horizontal'" },
      { name: 'showArrows', type: 'boolean', description: 'Show navigation arrows', default: 'false' },
      { name: 'scrollable', type: 'boolean', description: 'Enable scrolling', default: 'false' },
    ],
    alert: [
      { name: 'variant', type: "'default' | 'destructive' | 'success' | 'warning' | 'info' | 'premium' | 'featured' | 'glass'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'sm' | 'md' | 'lg' | 'xl'", description: 'Alert size', default: "'md'" },
      { name: 'dismissible', type: 'boolean', description: 'Show dismiss button', default: 'false' },
      { name: 'onDismiss', type: '() => void', description: 'Dismiss handler', default: 'undefined' },
      { name: 'icon', type: 'ReactNode', description: 'Custom icon', default: 'undefined' },
      { name: 'autoIcon', type: 'boolean', description: 'Auto-determine icon', default: 'true' },
      { name: 'showShimmer', type: 'boolean', description: 'Show shimmer effect', default: 'false' },
      { name: 'fullWidth', type: 'boolean', description: 'Make alert full width', default: 'false' },
      { name: 'animated', type: 'boolean', description: 'Enable animations', default: 'false' },
      { name: 'glowing', type: 'boolean', description: 'Enable glowing effect', default: 'false' },
    ],
    progress: [
      { name: 'value', type: 'number', description: 'Progress value (0-100)', default: '0' },
      { name: 'variant', type: "'default' | 'success' | 'warning' | 'destructive' | 'info' | 'premium' | 'featured' | 'glass'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'sm' | 'md' | 'lg' | 'xl'", description: 'Progress size', default: "'md'" },
      { name: 'showValue', type: 'boolean', description: 'Show percentage value', default: 'false' },
      { name: 'label', type: 'string', description: 'Progress label', default: 'undefined' },
      { name: 'icon', type: 'ReactNode', description: 'Custom icon', default: 'undefined' },
      { name: 'autoIcon', type: 'boolean', description: 'Auto-determine icon', default: 'false' },
      { name: 'showShimmer', type: 'boolean', description: 'Show shimmer effect', default: 'false' },
      { name: 'showGlow', type: 'boolean', description: 'Show glow effect', default: 'false' },
      { name: 'fullWidth', type: 'boolean', description: 'Make progress full width', default: 'true' },
    ],
    toast: [
      { name: 'variant', type: "'default' | 'destructive' | 'success' | 'warning' | 'info' | 'premium' | 'featured' | 'glass'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'sm' | 'md' | 'lg'", description: 'Toast size', default: "'md'" },
      { name: 'icon', type: 'ReactNode', description: 'Custom icon', default: 'undefined' },
      { name: 'autoIcon', type: 'boolean', description: 'Auto-determine icon', default: 'true' },
      { name: 'showShimmer', type: 'boolean', description: 'Show shimmer effect', default: 'false' },
      { name: 'animated', type: 'boolean', description: 'Enable animations', default: 'false' },
      { name: 'glowing', type: 'boolean', description: 'Enable glowing effect', default: 'false' },
    ],
    avatar: [
      { name: 'size', type: "'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl'", description: 'Avatar size', default: "'md'" },
      { name: 'shape', type: "'circle' | 'square' | 'hexagon'", description: 'Avatar shape', default: "'circle'" },
      { name: 'status', type: "'online' | 'offline' | 'busy' | 'away'", description: 'Status indicator', default: 'undefined' },
      { name: 'interactive', type: 'boolean', description: 'Make avatar interactive', default: 'false' },
      { name: 'bordered', type: 'boolean', description: 'Show border', default: 'false' },
    ],
    separator: [
      { name: 'variant', type: "'default' | 'subtle' | 'bold' | 'success' | 'warning' | 'destructive' | 'info' | 'premium'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'", description: 'Separator thickness', default: "'md'" },
      { name: 'animated', type: 'boolean', description: 'Enable animations', default: 'false' },
      { name: 'dotted', type: 'boolean', description: 'Use dotted style', default: 'false' },
      { name: 'label', type: 'string', description: 'Separator label', default: 'undefined' },
      { name: 'labelPosition', type: "'left' | 'center' | 'right'", description: 'Label position', default: "'center'" },
      { name: 'showIcon', type: 'boolean', description: 'Show icon', default: 'false' },
      { name: 'icon', type: 'ReactNode', description: 'Custom icon', default: 'undefined' },
    ],
    modal: [
      { name: 'variant', type: "'default' | 'error' | 'success' | 'warning' | 'info' | 'premium' | 'featured'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'sm' | 'md' | 'lg' | 'xl' | 'full'", description: 'Modal size', default: "'md'" },
      { name: 'rounded', type: "'sm' | 'md' | 'lg' | 'xl'", description: 'Border radius', default: "'md'" },
      { name: 'showCloseButton', type: 'boolean', description: 'Show close button', default: 'true' },
      { name: 'closeOnOverlayClick', type: 'boolean', description: 'Close on overlay click', default: 'true' },
      { name: 'showIcon', type: 'boolean', description: 'Show status icon', default: 'false' },
      { name: 'icon', type: 'ReactNode', description: 'Custom icon', default: 'undefined' },
    ],
    tooltip: [
      { name: 'variant', type: "'default' | 'dark' | 'light' | 'success' | 'error' | 'warning' | 'info' | 'premium'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'sm' | 'md' | 'lg'", description: 'Tooltip size', default: "'md'" },
      { name: 'side', type: "'top' | 'right' | 'bottom' | 'left'", description: 'Tooltip side', default: "'top'" },
      { name: 'align', type: "'start' | 'center' | 'end'", description: 'Tooltip alignment', default: "'center'" },
      { name: 'sideOffset', type: 'number', description: 'Distance from trigger', default: '4' },
      { name: 'alignOffset', type: 'number', description: 'Alignment offset', default: '0' },
      { name: 'avoidCollisions', type: 'boolean', description: 'Avoid collisions', default: 'true' },
      { name: 'arrow', type: 'boolean', description: 'Show arrow', default: 'false' },
    ],
    datatable: [
      { name: 'data', type: 'T[]', description: 'Array of data objects', default: '[]' },
      { name: 'columns', type: 'Column<T>[]', description: 'Column configuration array', default: '[]' },
      { name: 'loading', type: 'boolean', description: 'Show loading state', default: 'false' },
      { name: 'pagination', type: 'PaginationConfig', description: 'Pagination configuration', default: 'undefined' },
      { name: 'rowSelection', type: 'RowSelectionConfig', description: 'Row selection configuration', default: 'undefined' },
      { name: 'onRow', type: '(record: T, index: number) => RowProps', description: 'Row event handlers', default: 'undefined' },
      { name: 'expandable', type: 'ExpandableConfig', description: 'Row expansion configuration', default: 'undefined' },
      { name: 'scroll', type: '{ x?: number | string; y?: number | string }', description: 'Scroll configuration', default: 'undefined' },
      { name: 'size', type: "'small' | 'middle' | 'large'", description: 'Table size', default: "'middle'" },
      { name: 'bordered', type: 'boolean', description: 'Show borders', default: 'false' },
      { name: 'showHeader', type: 'boolean', description: 'Show table header', default: 'true' },
      { name: 'sticky', type: 'boolean', description: 'Sticky header', default: 'false' },
      { name: 'virtual', type: 'boolean', description: 'Virtual scrolling', default: 'false' },
      { name: 'emptyText', type: 'string', description: 'Empty state text', default: "'No data'" },
      { name: 'rowKey', type: 'string | ((record: T) => string)', description: 'Row key field', default: "'id'" },
      { name: 'variant', type: "'default' | 'outlined' | 'filled' | 'ghost' | 'premium' | 'featured'", description: 'Visual style variant', default: "'default'" },
      { name: 'density', type: "'compact' | 'normal' | 'comfortable'", description: 'Row density', default: "'normal'" },
    ],
    chart: [
      { name: 'data', type: 'ChartData[]', description: 'Array of chart data objects', default: '[]' },
      { name: 'type', type: "'line' | 'area' | 'bar' | 'pie' | 'radar' | 'scatter' | 'composed'", description: 'Chart type', default: "'line'" },
      { name: 'title', type: 'string', description: 'Chart title', default: 'undefined' },
      { name: 'description', type: 'string', description: 'Chart description', default: 'undefined' },
      { name: 'showLegend', type: 'boolean', description: 'Show legend', default: 'true' },
      { name: 'showTooltip', type: 'boolean', description: 'Show tooltip', default: 'true' },
      { name: 'showGrid', type: 'boolean', description: 'Show grid lines', default: 'true' },
      { name: 'colors', type: 'string[]', description: 'Color palette for chart', default: 'defaultColors' },
      { name: 'height', type: 'number', description: 'Chart height', default: 'undefined' },
      { name: 'width', type: 'number', description: 'Chart width', default: 'undefined' },
      { name: 'loading', type: 'boolean', description: 'Show loading state', default: 'false' },
      { name: 'error', type: 'string', description: 'Error message', default: 'undefined' },
      { name: 'dataKey', type: 'string', description: 'Data key for single series', default: "'value'" },
      { name: 'xAxisKey', type: 'string', description: 'X-axis data key', default: "'name'" },
      { name: 'barDataKey', type: 'string', description: 'Bar chart data key', default: "'value'" },
      { name: 'pieDataKey', type: 'string', description: 'Pie chart data key', default: "'value'" },
      { name: 'nameKey', type: 'string', description: 'Name key for pie/radar charts', default: "'name'" },
      { name: 'series', type: 'ChartSeries[]', description: 'Multi-series configuration', default: '[]' },
      { name: 'variant', type: "'default' | 'card' | 'glass' | 'premium' | 'featured'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'sm' | 'md' | 'lg' | 'xl' | 'full'", description: 'Chart size', default: "'md'" },
    ],
    timeline: [
      { name: 'items', type: 'TimelineItem[]', description: 'Array of timeline items', default: '[]' },
      { name: 'showConnector', type: 'boolean', description: 'Show connecting lines between items', default: 'true' },
      { name: 'connectorVariant', type: "'default' | 'primary' | 'success' | 'warning' | 'destructive' | 'accent'", description: 'Connector line variant', default: "'default'" },
      { name: 'dotVariant', type: "'default' | 'primary' | 'success' | 'warning' | 'destructive' | 'accent' | 'outline' | 'ghost'", description: 'Dot indicator variant', default: "'default'" },
      { name: 'dotSize', type: "'sm' | 'md' | 'lg'", description: 'Dot indicator size', default: "'md'" },
      { name: 'position', type: "'left' | 'right' | 'alternate'", description: 'Timeline item position', default: "'left'" },
      { name: 'loading', type: 'boolean', description: 'Show loading state', default: 'false' },
      { name: 'error', type: 'string', description: 'Error message', default: 'undefined' },
      { name: 'emptyText', type: 'string', description: 'Empty state text', default: "'No timeline items'" },
      { name: 'onItemClick', type: '(item: TimelineItem, index: number) => void', description: 'Item click handler', default: 'undefined' },
      { name: 'renderItem', type: '(item: TimelineItem, index: number) => React.ReactNode', description: 'Custom item renderer', default: 'undefined' },
      { name: 'variant', type: "'default' | 'card' | 'glass' | 'premium' | 'featured'", description: 'Visual style variant', default: "'default'" },
      { name: 'orientation', type: "'vertical' | 'horizontal'", description: 'Timeline orientation', default: "'vertical'" },
      { name: 'size', type: "'sm' | 'md' | 'lg'", description: 'Timeline size', default: "'md'" },
    ],
    calendar: [
      { name: 'value', type: 'Date', description: 'Selected date value', default: 'undefined' },
      { name: 'defaultValue', type: 'Date', description: 'Default selected date', default: 'undefined' },
      { name: 'onValueChange', type: '(date: Date) => void', description: 'Date change handler', default: 'undefined' },
      { name: 'events', type: 'CalendarEvent[]', description: 'Array of calendar events', default: '[]' },
      { name: 'onEventClick', type: '(event: CalendarEvent) => void', description: 'Event click handler', default: 'undefined' },
      { name: 'onDateClick', type: '(date: Date) => void', description: 'Date click handler', default: 'undefined' },
      { name: 'showEvents', type: 'boolean', description: 'Show events on calendar', default: 'true' },
      { name: 'showWeekends', type: 'boolean', description: 'Show weekend days', default: 'true' },
      { name: 'showTodayButton', type: 'boolean', description: 'Show today button', default: 'true' },
      { name: 'showNavigation', type: 'boolean', description: 'Show navigation arrows', default: 'true' },
      { name: 'minDate', type: 'Date', description: 'Minimum selectable date', default: 'undefined' },
      { name: 'maxDate', type: 'Date', description: 'Maximum selectable date', default: 'undefined' },
      { name: 'disabledDates', type: 'Date[]', description: 'Array of disabled dates', default: '[]' },
      { name: 'loading', type: 'boolean', description: 'Show loading state', default: 'false' },
      { name: 'error', type: 'string', description: 'Error message', default: 'undefined' },
      { name: 'emptyText', type: 'string', description: 'Empty state text', default: "'No events'" },
      { name: 'locale', type: 'string', description: 'Locale for date formatting', default: "'en-US'" },
      { name: 'firstDayOfWeek', type: '0 | 1', description: 'First day of week (0=Sunday, 1=Monday)', default: '0' },
      { name: 'mode', type: "'single' | 'range' | 'multiple'", description: 'Selection mode', default: "'single'" },
      { name: 'range', type: '{ from: Date; to: Date }', description: 'Selected date range', default: 'undefined' },
      { name: 'multiple', type: 'Date[]', description: 'Multiple selected dates', default: '[]' },
      { name: 'onRangeChange', type: '(range: { from: Date; to: Date } | undefined) => void', description: 'Range change handler', default: 'undefined' },
      { name: 'onMultipleChange', type: '(dates: Date[]) => void', description: 'Multiple dates change handler', default: 'undefined' },
      { name: 'variant', type: "'default' | 'card' | 'glass' | 'premium' | 'featured'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'sm' | 'md' | 'lg'", description: 'Calendar size', default: "'md'" },
    ],
    heatmap: [
      { name: 'data', type: 'HeatmapData[]', description: 'Array of heatmap data points', default: '[]' },
      { name: 'startDate', type: 'Date', description: 'Start date for heatmap range', default: 'undefined' },
      { name: 'endDate', type: 'Date', description: 'End date for heatmap range', default: 'undefined' },
      { name: 'colorScheme', type: "'green' | 'blue' | 'red' | 'purple' | 'orange' | 'gray'", description: 'Color scheme for heatmap', default: "'green'" },
      { name: 'showTooltip', type: 'boolean', description: 'Show tooltip on hover', default: 'true' },
      { name: 'showLegend', type: 'boolean', description: 'Show color legend', default: 'true' },
      { name: 'showLabels', type: 'boolean', description: 'Show labels and title', default: 'true' },
      { name: 'showWeekdays', type: 'boolean', description: 'Show weekday labels', default: 'true' },
      { name: 'showMonths', type: 'boolean', description: 'Show month labels', default: 'true' },
      { name: 'maxValue', type: 'number', description: 'Maximum value for intensity calculation', default: 'undefined' },
      { name: 'minValue', type: 'number', description: 'Minimum value for intensity calculation', default: 'undefined' },
      { name: 'loading', type: 'boolean', description: 'Show loading state', default: 'false' },
      { name: 'error', type: 'string', description: 'Error message', default: 'undefined' },
      { name: 'emptyText', type: 'string', description: 'Empty state text', default: "'No data available'" },
      { name: 'onCellClick', type: '(data: HeatmapData) => void', description: 'Cell click handler', default: 'undefined' },
      { name: 'onCellHover', type: '(data: HeatmapData | null) => void', description: 'Cell hover handler', default: 'undefined' },
      { name: 'tooltipContent', type: '(data: HeatmapData) => React.ReactNode', description: 'Custom tooltip content', default: 'undefined' },
      { name: 'legendLabels', type: 'string[]', description: 'Legend labels', default: "['Less', 'More']" },
      { name: 'cellSize', type: "'sm' | 'md' | 'lg'", description: 'Size of heatmap cells', default: "'md'" },
      { name: 'orientation', type: "'horizontal' | 'vertical'", description: 'Heatmap orientation', default: "'horizontal'" },
      { name: 'weekStart', type: '0 | 1', description: 'First day of week (0=Sunday, 1=Monday)', default: '0' },
      { name: 'variant', type: "'default' | 'card' | 'glass' | 'premium' | 'featured'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'sm' | 'md' | 'lg'", description: 'Heatmap size', default: "'md'" },
    ],
    tree: [
      { name: 'data', type: 'TreeNode[]', description: 'Array of tree nodes', default: '[]' },
      { name: 'onNodeSelect', type: '(node: TreeNode) => void', description: 'Node selection handler', default: 'undefined' },
      { name: 'onNodeToggle', type: '(node: TreeNode) three => void', description: 'Node toggle handler', default: 'undefined' },
      { name: 'onNodeExpand', type: '(node: TreeNode) => void', description: 'Node expand handler', default: 'undefined' },
      { name: 'onNodeCollapse', type: '(node: TreeNode) => void', description: 'Node collapse handler', default: 'undefined' },
      { name: 'selectedNodeId', type: 'string', description: 'Currently selected node ID', default: 'undefined' },
      { name: 'expandedNodeIds', type: 'string[]', description: 'Array of expanded node IDs', default: '[]' },
      { name: 'showIcons', type: 'boolean', description: 'Show node icons', default: 'true' },
      { name: 'showConnectors', type: 'boolean', description: 'Show connecting lines', default: 'true' },
      { name: 'allowMultiSelect', type: 'boolean', description: 'Allow multiple node selection', default: 'false' },
      { name: 'searchable', type: 'boolean', description: 'Enable search functionality', default: 'false' },
      { name: 'searchQuery', type: 'string', description: 'Current search query', default: "''" },
      { name: 'onSearchChange', type: '(query: string) => void', description: 'Search query change handler', default: 'undefined' },
      { name: 'loading', type: 'boolean', description: 'Show loading state', default: 'false' },
      { name: 'error', type: 'string', description: 'Error message', default: 'undefined' },
      { name: 'emptyText', type: 'string', description: 'Empty state text', default: "'No items'" },
      { name: 'renderNode', type: '(node: TreeNode, level: number) => React.ReactNode', description: 'Custom node renderer', default: 'undefined' },
      { name: 'renderIcon', type: '(node: TreeNode) => React.ReactNode', description: 'Custom icon renderer', default: 'undefined' },
      { name: 'renderLabel', type: '(node: TreeNode) => React.ReactNode', description: 'Custom label renderer', default: 'undefined' },
      { name: 'filterNodes', type: '(node: TreeNode, query: string) => boolean', description: 'Custom node filter function', default: 'undefined' },
      { name: 'sortNodes', type: '(a: TreeNode, b: TreeNode) => number', description: 'Custom node sort function', default: 'undefined' },
      { name: 'variant', type: "'default' | 'card' | 'glass' | 'premium' | 'featured'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'sm' | 'md' | 'lg'", description: 'Tree size', default: "'md'" },
    ],
    list: [
      { name: 'items', type: 'ListItem[]', description: 'Array of list items', default: '[]' },
      { name: 'columns', type: 'ListColumn[]', description: 'Column configuration for table-like display', default: 'undefined' },
      { name: 'onItemSelect', type: '(item: ListItem) => void', description: 'Item selection handler', default: 'undefined' },
      { name: 'onItemClick', type: '(item: ListItem) => void', description: 'Item click handler', default: 'undefined' },
      { name: 'selectedItemId', type: 'string', description: 'Currently selected item ID', default: 'undefined' },
      { name: 'allowMultiSelect', type: 'boolean', description: 'Allow multiple item selection', default: 'false' },
      { name: 'selectable', type: 'boolean', description: 'Enable item selection', default: 'true' },
      { name: 'sortable', type: 'boolean', description: 'Enable column sorting', default: 'false' },
      { name: 'onSort', type: "(column: string, direction: 'asc' | 'desc') => void", description: 'Sort handler', default: 'undefined' },
      { name: 'sortColumn', type: 'string', description: 'Currently sorted column', default: 'undefined' },
      { name: 'sortDirection', type: "'asc' | 'desc'", description: 'Sort direction', default: "'asc'" },
      { name: 'searchable', type: 'boolean', description: 'Enable search functionality', default: 'false' },
      { name: 'searchQuery', type: 'string', description: 'Current search query', default: "''" },
      { name: 'onSearchChange', type: '(query: string) => void', description: 'Search query change handler', default: 'undefined' },
      { name: 'loading', type: 'boolean', description: 'Show loading state', default: 'false' },
      { name: 'error', type: 'string', description: 'Error message', default: 'undefined' },
      { name: 'emptyText', type: 'string', description: 'Empty state text', default: "'No items'" },
      { name: 'emptyIcon', type: 'React.ReactNode', description: 'Empty state icon', default: 'undefined' },
      { name: 'virtualized', type: 'boolean', description: 'Enable virtualization for large datasets', default: 'false' },
      { name: 'itemHeight', type: 'number', description: 'Height of each item for virtualization', default: '48' },
      { name: 'overscan', type: 'number', description: 'Number of items to render outside viewport', default: '5' },
      { name: 'renderItem', type: '(item: ListItem, index: number) => React.ReactNode', description: 'Custom item renderer', default: 'undefined' },
      { name: 'renderHeader', type: '() => React.ReactNode', description: 'Custom header renderer', default: 'undefined' },
      { name: 'filterItems', type: '(item: ListItem, query: string) => boolean', description: 'Custom item filter function', default: 'undefined' },
      { name: 'stickyHeader', type: 'boolean', description: 'Make header sticky', default: 'false' },
      { name: 'striped', type: 'boolean', description: 'Show alternating row colors', default: 'false' },
      { name: 'variant', type: "'default' | 'card' | 'glass' | 'premium' | 'featured'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'sm' | 'md' | 'lg'", description: 'List size', default: "'md'" },
    ],
    'stats-card': [
      { name: 'title', type: 'string', description: 'Stats card title', default: 'undefined' },
      { name: 'value', type: 'string | number', description: 'Main value to display', default: 'undefined' },
      { name: 'description', type: 'string', description: 'Additional description text', default: 'undefined' },
      { name: 'icon', type: 'React.ReactNode', description: 'Icon to display', default: 'undefined' },
      { name: 'change', type: '{ value: number; label: string; type?: "positive" | "negative" | "neutral" }', description: 'Change indicator data', default: 'undefined' },
      { name: 'trend', type: '{ data: number[]; type?: "line" | "bar" }', description: 'Trend data for visualization', default: 'undefined' },
      { name: 'loading', type: 'boolean', description: 'Show loading state', default: 'false' },
      { name: 'error', type: 'string', description: 'Error message', default: 'undefined' },
      { name: 'onClick', type: '() => void', description: 'Click handler', default: 'undefined' },
      { name: 'interactive', type: 'boolean', description: 'Make card interactive', default: 'false' },
      { name: 'animated', type: 'boolean', description: 'Enable animations', default: 'false' },
      { name: 'showTrend', type: 'boolean', description: 'Show trend indicators', default: 'true' },
      { name: 'prefix', type: 'string', description: 'Prefix for value', default: "''" },
      { name: 'suffix', type: 'string', description: 'Suffix for value', default: "''" },
      { name: 'precision', type: 'number', description: 'Number of decimal places', default: '0' },
      { name: 'format', type: "'number' | 'currency' | 'percentage'", description: 'Value format type', default: "'number'" },
      { name: 'currency', type: 'string', description: 'Currency code for currency format', default: "'USD'" },
      { name: 'variant', type: "'default' | 'glass' | 'premium' | 'featured' | 'success' | 'warning' | 'destructive'", description: 'Visual style variant', default: "'default'" },
      { name: 'size', type: "'sm' | 'md' | 'lg'", description: 'Card size', default: "'md'" },
    ],
  };

  return propsMap[componentId] || [];
}
